package com.zettamine.aop.aspects;

import java.lang.reflect.Method;

import org.aopalliance.intercept.MethodInterceptor;
import org.aopalliance.intercept.MethodInvocation;
import org.springframework.aop.AfterAdvice;
import org.springframework.aop.AfterReturningAdvice;
import org.springframework.aop.MethodBeforeAdvice;
import org.springframework.aop.ThrowsAdvice;

public class LoggingAspect implements MethodBeforeAdvice, AfterReturningAdvice, ThrowsAdvice,MethodInterceptor{

	@Override
	public void before(Method method, Object[] args, Object target) throws Throwable {
		System.out.println("Execution Started "+method.getName()+ " with "+ args.length+" arguments,target = "+target.getClass().getSimpleName());
	}
	@Override
	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {
		System.out.println("Execution Ended "+method.getName()+ " with "+ args.length+" arguments and returns - "+returnValue);
	}
	
	public void afterThrowing(Exception ex) {
		System.out.println("exception fired---> "+ex.toString()+" occured");
	}
	@Override
	public Object invoke(MethodInvocation invocation) throws Throwable {
		long startTime = System.currentTimeMillis();
		invocation.proceed();
		long endTime = System.currentTimeMillis();
	}
}
