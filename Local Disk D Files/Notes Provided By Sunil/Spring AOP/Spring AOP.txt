AOP
===
Aspect Oriented Programming (AOP) compliments OOPs in the sense that it also provides modularity. But the key unit of modularity is aspect than class.

AOP breaks the program logic into distinct parts (called concerns). It is used to increase modularity by cross-cutting concerns.

A cross-cutting concern is a concern that can affect the whole application and should be centralized in one location in code as possible, such as transaction management, authentication, logging, security, auditing etc.

Why use AOP?

It provides the pluggable way to dynamically add the additional concern before, after or around the actual logic. Suppose there are 10 methods in a class as given below:

    class BusinessService{  
    	public void m1(){...}  
   	public void m2(){...}  
   	public void m3(){...}  
   	
   	 public void n1(){...}  
  	 public void n2(){...}  

  	public void p1(){...}  
  	public void p2(){...}  
   	public void p3(){...}  
    }  
There are 3 methods that starts with "m", 2 methods that starts with "n" and 3 methods that starts with "p".

Understanding Scenario :: I have to maintain log and send notification after calling methods that starts from "m".

Problem without AOP :: We can call methods (that maintains log and sends notification) from the methods starting with m. In such scenario, we need to write the code in all the 3 methods.

But, if client says in future, I don't have to send notification, you need to change all the methods. It leads to the maintenance problem.

Solution with AOP :: We don't have to call methods from the method. Now we can define the additional concern like maintaining log, sending notification etc. not in the method of a class. It has to be maintained by spring container (by mentioning in spring configuration file or by using @Aspect)

In future, if client says to remove the notifier functionality, we need to change only in the xml file. So, maintenance is easy in AOP.

Where use AOP?

AOP is mostly used in following cases:

    - to provide declarative enterprise services such as declarative transaction management.
    - It allows users to implement custom aspects.


A layered approach is typically used to build applications:
 -> Web Layer - View logic for web apps OR JSON conversion for REST API
 -> Business Layer/ Service Layer - Business Logic
 -> Repository Layer/ Data Layer - Persistence Logic

Each layer has different responsibilities
 HOWEVER, there are a few common aspects that apply to all layers like
  Security,   Performance,   Logging etc    
These common aspects are called Cross Cutting Concerns
Aspect Oriented Programming can be used to implement Cross Cutting Concerns


TWO Popular AOP Frameworks
 a) Spring AOP
	NOT a complete AOP solution BUT very popular
	Only works with Spring Beans
	Example: Intercept method calls to Spring Beans

 b) AspectJ
	Complete AOP solution BUT rarely used
	Example: Intercept any method call on any Java class
	Example: Intercept change of values in a field



AOP Terminology
---------------
1) Aspect -> a modularization of a concern that cuts across multiple classes. Transaction management is a good example of a crosscutting concern in J2EE applications. In Spring AOP, aspects are implemented using regular classes (the schema-based approach) or regular classes annotated with the @Aspect annotation (the @AspectJ style))

Aspect is crosscutting concern. One aspect can lie in multiple objects.

2) Join point: Join point is a point that represents the execution of a method.
it represents where secondary logic should integrate with the primary logic
Spring AOP supports method level joinpoint.
When pointcut condition is true, the advice is executed. A specific execution instance of an advice is called a Join Point.

At run time, the point at which, when the conditions are met i.e. when the Pointcut is met & advice is being executed, it is referred to as JoinPoints.

3) Advice: Advice is an action taken by aspect. (when & what). 
           -> action taken by an aspect at a particular join point. Different types of advice include "around," "before" and "after" advice. Many AOP frameworks, including Spring, model an advice as an interceptor, maintaining a chain of interceptors around the join point.

4) Pointcut: what are the method calls that need to be intercepted.
it represents for which business methods secondary logic should be applied. 
Advice is nothing but, what are the action that needs to be done when a Pointcut is met.
A scenario which matches to join point.

5) Weaving : the process of combining Target and Aspect is called as Weaving. Weaver is the framework that implements AOP, AspectJ or Spring AOP Runtime
-> linking aspects with other application types or objects to create an advised object. This can be done at compile time (using the AspectJ compiler, for example), load time, or at runtime. Spring AOP, like other pure Java AOP frameworks, performs weaving at runtime.


6) Proxy : an object created by the AOP framework in order to implement the aspect contracts (advise method executions and so on). In the Spring Framework, an AOP proxy will be a JDK dynamic proxy or a CGLIB proxy.



AOP Implementations
-------------------
AOP implementations are provided by:

> AspectJ
> Spring AOP
> JBoss AOP


Spring AOP Example
------------------
4 types of advices supported in spring

> Before Advice - it is executed before the actual method call.
> After Advice - it is executed after the actual method call. If method returns a value, it is executed after returning value.
> Around Advice - it is executed before and after the actual method call.
> Throws Advice - it is executed if actual method throws exception.

All are interfaces in AOP

MethodBeforeAdvice interface extends the BeforeAdvice interface.

AfterReturningAdvice interface extends the AfterAdvice interface.

ThrowsAdvice interface extends the AfterAdvice interface.

MethodInterceptor interface extends the Interceptor interface. It is used in around advice.

-----------------------------------------------------------------------------------------------------
dependency: spring-context

package com.zettamine.aop.services;
public class ReportGenerator {
	public void generateExcelReport() {		
		System.out.println("logic to generate excel report!!!");
	}
	
	public void generateExcelReport(String fileName, String fileType) {		
		System.out.println("logic to generate excel report with custom file type and name!!!");
	}
	
	public boolean generateExcelReport(String fileName) {		
		System.out.println("logic to generate excel report with custom file name!!!");
		return new Random().nextBoolean();
	}	
}

package com.zettamine.aop.aspects;
public class LoggingAspect implements MethodBeforeAdvice {

	public void before(Method method, Object[] args, Object target) throws Throwable {
		System.out.println("Starting Execution of \"" + method.getName() + "()\" with " + args.length + " arguments");		
	}
		
}

aop-beans.xml

	<bean id="reportGen" class="com.zettamine.aop.services.ReportGenerator"/>
	<bean id="logAsp" class="com.zettamine.aop.aspects.LoggingAspect"/>
	
	<bean id="proxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="reportGen"/>
		<property name="interceptorNames">
			<list>
				<value>logAsp</value>
			</list>
		</property>
	</bean>


ApplicationContext context = new ClassPathXmlApplicationContext("aop-beans.xml");
		
ReportGenerator repGen = (ReportGenerator) context.getBean("proxy");
		
repGen.generateExcelReport();
System.out.println();
repGen.generateExcelReport("wiproHibBatch", "pdf");
System.out.println();
repGen.generateExcelReport("wiproSpringBatch.xlsx");
((AbstractApplicationContext)context).close();

-----------------------------------------------------------------------------------------------------

1) MethodBeforeAdvice Example

a) A.java

A.java

package co.edureka;  
public class A 
{  
 public void m()
 {
  System.out.println("actual business logic");
 } 
}  

b) BeforeAdvisor.java

package co.edureka;  
import java.lang.reflect.Method;  
import org.springframework.aop.MethodBeforeAdvice;  

public class BeforeAdvisor implements MethodBeforeAdvice
{  
public void before(Method method, Object[] args, Object target)throws Throwable 
{  
System.out.println("additional concern before actual logic");  
}  
}  

c) applicationContext.xml

<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"	xsi:schemaLocation="http://www.springframework.org/schema/beans 	http://www.springframework.org/schema/beans/spring-beans.xsd">
      
<bean id="obj" class="co.edureka.A"></bean>  
<bean id="ba" class="co.edureka.BeforeAdvisor"></bean>  
      
<bean id="proxy" class="org.springframework.aop.framework.ProxyFactoryBean">  
     <property name="target" ref="obj"></property>  
     <property name="interceptorNames">  
     <list>  
       <value>ba</value>  
     </list>  
    </property>  
</bean>  
</beans>  

The ProxyFactoryBean class is provided by Spring Famework. It contains 2 properties target and interceptorNames. The instance of A class will be considered as target object and the instance of advisor class as interceptor. You need to pass the advisor object as the list object as in the xml file given above.

Test.java

package co.edureka;  

public class Test 
{  
public static void main(String[] args) 
{  
ApplicationContext ctx=new ClassPathXmlApplicationContext("applicationContext.xml");  
 A a=ctx.getBean("proxy",A.class);  
a.m();  
}  
}  



public class BeforeAdvisor implements MethodBeforeAdvice
{  
public void before(Method method, Object[] args, Object target)throws Throwable 
{  
  System.out.println("additional concern before actual logic");  
  System.out.println("method info:"+method.getName()+" "+method.getModifiers());  
  System.out.println("argument info:");  
  for(Object arg:args)  
  {
            System.out.println(arg);  
  }
  System.out.println("target Object:"+target);  
  System.out.println("target object class name: "+target.getClass().getName());  
 }  
}  

public class Test {  
public static void main(String[] args) {  
    Resource r=new ClassPathResource("applicationContext.xml");  
    BeanFactory factory=new XmlBeanFactory(r);  
      
    A a=factory.getBean("proxy",A.class);  
        System.out.println("proxy class name: "+a.getClass().getName());  
    a.m();  
}  
}  

****************************
2) AfterReturningAdvice Example

AfterAdvisor.java

package co.edureka;  
import java.lang.reflect.Method;  
import org.springframework.aop.AfterReturningAdvice;  
public class AfterAdvisor implements AfterReturningAdvice
{  
@Override  
public void afterReturning(Object returnValue, Method method,Object[] args, Object target) throws Throwable 
{  
System.out.println("additional concern after returning advice");  
}  
}  
*************************************

3) MethodInterceptor (AroundAdvice) Example

AroundAdvisor.java

package co.edureka;  
import org.aopalliance.intercept.MethodInterceptor;  
import org.aopalliance.intercept.MethodInvocation;  
public class AroundAdvisor implements MethodInterceptor
{  
@Override  
public Object invoke(MethodInvocation mi) throws Throwable 
{  
Object obj;  
System.out.println("additional concern before actual logic");  
obj=mi.proceed();  
System.out.println("additional concern after actual logic");  
return obj;  
}  
}  

4) ThrowsAdvice Example

Validator.java

package co.edureka;  
public class Validator 
{  
public void validate(int age)throws Exception
{  
if(age<18){  
  throw new ArithmeticException("Not Valid Age");  
}  
else{  
  System.out.println("vote confirmed");  
}  
}  
}  

ThrowsAdvisor.java

package co.edureka;  
import org.springframework.aop.ThrowsAdvice;  
public class ThrowsAdvisor implements ThrowsAdvice
{  
public void afterThrowing(Exception ex)
{  
System.out.println("additional concern if exception occurs");  
}  
}  


********************************

Spring AOP
=========

AOP Terminology

1) Aspect: Aspect is crosscutting concern. One aspect can lie in multiple objects.

2) Join point: Join point is a point that represents the execution of a method.

3) Advice: Advice is an action taken by aspect. (when & what)

4) Pointcut: A scenario which matches to join point.

5) Target object: If an object is advised by more than one aspect, that object is called target object. This is also referred as advised object.

6) Weaving: Linking aspects to other application objects to create an advised object. 

*************************
Spring AspectJ
--------------
1) Create a New Java Project in Eclipse

2) Create a New Package : co.edureka

3) Convert to Maven Project
Right click on Project > Configure > Convert To Maven Project
Group ID : co.edureka
Artifact ID : Aspectj

Add Dependencies to pom.xml

mvnrepository.com

Dependencies > Springframework [context, aspects]

pom.xml

<dependencies>
  <dependency>	
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>5.2.8.RELEASE</version>
  </dependency>
  <dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-aspects</artifactId>
    <version>5.2.8.RELEASE</version>
  </dependency>  	
</dependencies>
<build>

4) Create Bean Class

package co.edureka;
public class Banking{
  public void deposit(){
    System.out.println("Depositing Amount!");
  }
  public void deposit(String acno, double amt) {
    System.out.println("Depositing amount Rs. "+amt+" in A/C: "+acno);
  }	
}

5) Create a New class - Logger
package co.edureka;
class Logger{
 public void log(){
  System.out.println("LOG: Going to deposit amount");
 }
}

6) Create a Spring Bean Configuration file - context.xml

include aop namespace

xmlns:aop="http://www.springframework.org/schema/aop"

> create beans for co.edureka.Banking & co.edureka.Logger
	<bean id="bank" class="co.edureka.Banking" />
	<bean id="logger" class="co.edureka.Logger" />

> aop (tab) > beans > right click and click on "Insert <aop:config> element"

> config > right click > insert aop:pointcut   id : bankpoint expression : execution(void co.edureka.Banking.deposit(..))

> config > right click > insert aop:aspect  id: loggeraspect	ref=logger

> aspect > right click > insert aop:before element ::  pointcut-ref: bankpoint	method: log


<bean id="bank" class="co.edureka.Banking" />
<bean id="logger" class="co.edureka.Logger" />

<aop:config>
  <aop:pointcut expression="execution(void co.edureka.Banking.deposit(..))" id="bankpoint" />
    <aop:aspect id="loggeraspect" ref="log">
       <aop:before method="log" pointcut-ref="bankpoint" />
    </aop:aspect>
</aop:config>

OR

<aop:config>
  <aop:aspect ref="logger" id="loggeraspect">
     <aop:before method="log" pointcut="execution(void co.edureka.Banking.deposit())" />
  </aop:aspect>
</aop:config>


Main.java
---------
package co.edureka;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Main 
{
 public static void main(String[] args) 
 {
  ApplicationContext context=new ClassPathXmlApplicationContext("context.xml");
  Banking bank = (Banking)context.getBean("bank");
  bank.deposit();
  bank.deposit("SBIN123456",75000.0);
 }
}






Annotation Based Aspects
------------------------
add context namespace
xmlns:context

<context:annotation-config />
<context:component-scan base-package="co.edureka" />
<aop:aspectj-autoproxy/>

@Aspect
@Component
class Logger{
 @Before("execution(void co.edureka.Camera.snap())")
 public void aboutToTakePhoto(){
   sysout("About to Take photo");
}
}

@Component
public class Camera{
  public void snap(){
    System.out.println("SNAP");
}
}
	OR
In Logger class

@Pointcut("execution(void co.edureka.Camera.snap())")
public void cameraSnap(){
}

@Before("cameraSnap")
 public void aboutToTakePhoto(){
   sysout("About to Take photo");
}

Wildcard in Pointcut Expressions

@Pointcut("execution(void co.edureka.Camera.snap(..))")
@Pointcut("execution(String co.edureka.Camera.snap(String))")
@Pointcut("execution(* co.edureka.Camera.snap(String))")
**************************


Spring AOP AspectJ Annotation
-----------------------------------

The Spring Framework recommends you to use Spring AspectJ AOP implementation over the Spring 1.2 old style dtd based AOP implementation because it provides you more control and it is easy to use.

There are two ways to use Spring AOP AspectJ implementation:

> By annotation
> By xml configuration (schema based)
Spring AspectJ AOP implementation provides many annotations:

    @Aspect declares the class as aspect.
    @Pointcut declares the pointcut expression.

The annotations used to create advices are given below:

    @Before declares the before advice. It is applied before calling the actual method.
    @After declares the after advice. It is applied after calling the actual method and before returning result.
    @AfterReturning declares the after returning advice. It is applied after calling the actual method and before returning result. But you can get the result value in the advice.
    @Around declares the around advice. It is applied before and after calling the actual method.
    @AfterThrowing declares the throws advice. It is applied if actual method throws exception.



Pointcut is an expression language of Spring AOP.

The @Pointcut annotation is used to define the pointcut. We can refer the pointcut expression by name also. 

    @Pointcut("execution(* Operation.*(..))")  
    private void doSomething() {}  

The name of the pointcut expression is doSomething(). It will be applied on all the methods of Operation class regardless of return type


    @Pointcut("execution(public * *(..))")  

It will be applied on all the public methods.

    @Pointcut("execution(public Operation.*(..))")  

It will be applied on all the public methods of Operation class.

    @Pointcut("execution(* Operation.*(..))")  

It will be applied on all the methods of Operation class.

    @Pointcut("execution(public Employee.set*(..))")  

It will be applied on all the public setter methods of Employee class.

    @Pointcut("execution(int Operation.*(..))")  

It will be applied on all the methods of Operation class that returns int value


