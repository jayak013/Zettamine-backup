---- make changes inside Gateway server to accept service names with lower case ----
POST   http://localhost:8072/accounts/api/create

configserver.yml
spring:
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true 
          lower-case-service-id: true
	  						lowerCaseServiceId: true


------ Implementing Custom Routing using Spring Cloud Gateway ------

custom requirement --> suppose we want to make the clients to send a request to 
http://localhost:8072/zettabank/accounts/api/create   
http://localhost:8072/zettabank/loans/api/create 
http://localhost:8072/zettabank/accounts/api/create 

--- like dynamic routing --- define ourown routing configurations -- not the default routing configurations


in bootstrap class

@Bean
public RouteLocator zettaBankRouteConfig(RouteLocatorBuilder routeLocatorBuilder) {
 return routeLocatorBuilder.routes()
			.route(p -> p
				     .path("/zettabank/accounts/**")
				     .filters( f -> f.rewritePath("/zettabank/accounts/(?<segment>.*)","/${segment}"))
				.uri("lb://ACCOUNTS")) 

			.route(p -> p
				     .path("/zettabank/loans/**")
				     .filters( f -> f.rewritePath("/zettabank/loans/(?<segment>.*)","/${segment}"))
				.uri("lb://LOANS")) 

			.route(p -> p
				     .path("/zettabank/cards/**)
				     .filters( f -> f.rewritePath("/zettabank/cards/(?<segment>.*)","/${segment}"))
				.uri("lb://CARDS")) 

	.build();			
}

run the application 

http://localhost:8072/zettabank/accounts/api/create   


---> check  http://localhost:8072/actuator/gateway/routes

-- we can see the default configurations also - to disable the default behaviour
spring.cloud.gateway.discovery.locator.enabled: false

---> check  http://localhost:8072/actuator/gateway/routes



--- addResponeHeader filter -----------------

refer in official documentation
spring.io > Projects > Spring Cloud > Spring Cloud Gateway > Learn
 --> Fluent Java Routes API
 --> Route Predicate Factories  - The path Route Predicate Factory

 --> GatewayFilter Factories  - The AddResponseHeader GatewayFilter Factory

			.route(p -> p
			    .path("/zettabank/accounts/**")
			    .filters( f -> f.rewritePath("/zettabank/accounts/(?<segment>.*)","/${segment}")
					.addResponseHeader("X-Response-Time", LocalDateTime.now().toString()))
				.uri("lb://ACCOUNTS")) 


add the responseHeader filter for the rest route also

run te application
http://localhost:8072/zettabank/accounts/api/create   
  check the Response Headers in POSTMAN


----------- Implementing Cross cutting concerns Tracing & Logging using Gateway ------------

Business Scenario / Requirement : as soon as our Gateway server receives an external traffic/ request it has to generate an ID (a randomly generated value like correlation ID or Trace ID) and the same ID to be forwarded to all the further microservices that my request is going to travel - gateway to accounts, accounts to loans and cards, need to do some logging and also send the ID back to client with response header


Practicals:

-> create custom filters

1) RequestTraceFilter ---> responsible to generate an ID (trace ID/ Correlation ID) when ever a new request comes to our Gateway server from the external client application

2) ResponseTraceFilter ---> responsible to add the ID (trace ID/ Correlation ID) into the response so that the client also will be aware of the trace ID

3) FilterUtility ---> responsible to define all the common logics which is needed for Request and Response Trace filters 

package com.zettamine.gatewayserver.filters;

@Component
public class FilterUtility {

    public static final String CORRELATION_ID = "zettabank-correlation-id";

    public String getCorrelationId(HttpHeaders requestHeaders) {
        if (requestHeaders.get(CORRELATION_ID) != null) {
            List<String> requestHeaderList = requestHeaders.get(CORRELATION_ID);
            return requestHeaderList.stream().findFirst().get();
        } else {
            return null;
        }
    }

    public ServerWebExchange setRequestHeader(ServerWebExchange exchange, String name, String value) {
        return exchange.mutate().request(exchange.getRequest().mutate().header(name, value).build()).build();
    }

    public ServerWebExchange setCorrelationId(ServerWebExchange exchange, String correlationId) {
        return this.setRequestHeader(exchange, CORRELATION_ID, correlationId);
    }
}



package com.zettamine.gatewayserver.filters;
@Order(1)
@Component
public class RequestTraceFilter implements GlobalFilter {

    private static final Logger logger = LoggerFactory.getLogger(RequestTraceFilter.class);

    @Autowired
    FilterUtility filterUtility;

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        HttpHeaders requestHeaders = exchange.getRequest().getHeaders();
        if (isCorrelationIdPresent(requestHeaders)) {
            logger.debug("zettaBank-correlation-id found in RequestTraceFilter : {}",
                    filterUtility.getCorrelationId(requestHeaders));
        } else {
            String correlationID = generateCorrelationId();
            exchange = filterUtility.setCorrelationId(exchange, correlationID);
            logger.debug("zettaBank-correlation-id generated in RequestTraceFilter : {}", correlationID);
        }
        return chain.filter(exchange);
    }

    private boolean isCorrelationIdPresent(HttpHeaders requestHeaders) {
        if (filterUtility.getCorrelationId(requestHeaders) != null) {
            return true;
        } else {
            return false;
        }
    }

    private String generateCorrelationId() {
        return java.util.UUID.randomUUID().toString();
    }

}




package com.zettamine.gatewayserver.filters;
@Configuration
public class ResponseTraceFilter {

    private static final Logger logger = LoggerFactory.getLogger(ResponseTraceFilter.class);

    @Autowired
    FilterUtility filterUtility;

    @Bean
    public GlobalFilter postGlobalFilter() {
        return (exchange, chain) -> {
            return chain.filter(exchange).then(Mono.fromRunnable(() -> {
                HttpHeaders requestHeaders = exchange.getRequest().getHeaders();
                String correlationId = filterUtility.getCorrelationId(requestHeaders);
                logger.debug("Updated the correlation id to the outbound headers: {}", correlationId);
                exchange.getResponse().getHeaders().add(filterUtility.CORRELATION_ID, correlationId);
            }));
        };
    }
}


@Order(1)  ---> order of filter execution

to activate the debug logger 

logging:
  level:
    com:
      zettamine:    
        gatewayserver: DEBUG



in accounts ms 
-> got controllers - AccountsController & CustomerController

inside CustomerController

private static final Logger logger = LoggerFactory.getLogger(CustomerController.class);


    @GetMapping("/fetchCustomerDetails")
    public ResponseEntity<CustomerDetailsDto> fetchCustomerDetails(@RequestHeader("zettabank-correlation-id") String correlationId,  @RequestParam @Pattern(regexp="(^$|[0-9]{10})", message = "Mobile number must be 10 digits") String mobileNumber) {
        logger.debug("zettaBank-correlation-id found: {} ", correlationId);
        CustomerDetailsDto customerDetailsDto = iCustomersService.fetchCustomerDetails(mobileNumber, correlationId);
        return ResponseEntity.status(HttpStatus.SC_OK).body(customerDetailsDto);
    }


in ICustomerService interface

CustomerDetailsDto fetchCustomerDetails(String mobileNumber, String correlationId);

in CustomerServiceImpl

public CustomerDetailsDto fetchCustomerDetails(String mobileNumber, String correlationId) {
        Customer customer = customerRepository.findByMobileNumber(mobileNumber).orElseThrow(
                () -> new ResourceNotFoundException("Customer", "mobileNumber", mobileNumber)
        );
        Accounts accounts = accountsRepository.findByCustomerId(customer.getCustomerId()).orElseThrow(
                () -> new ResourceNotFoundException("Account", "customerId", customer.getCustomerId().toString())
        );

        CustomerDetailsDto customerDetailsDto = CustomerMapper.mapToCustomerDetailsDto(customer, new CustomerDetailsDto());
        customerDetailsDto.setAccountsDto(AccountsMapper.mapToAccountsDto(accounts, new AccountsDto()));

        ResponseEntity<LoansDto> loansDtoResponseEntity = loansFeignClient.fetchLoanDetails(correlationId, mobileNumber);
        customerDetailsDto.setLoansDto(loansDtoResponseEntity.getBody());

        ResponseEntity<CardsDto> cardsDtoResponseEntity = cardsFeignClient.fetchCardDetails(correlationId, mobileNumber);
        customerDetailsDto.setCardsDto(cardsDtoResponseEntity.getBody());

        return customerDetailsDto;

    }


inside Feign client interfaces

public ResponseEntity<LoansDto> fetchLoanDetails(@RequestHeader("zettabank-correlation-id")
                                                         String correlationId, @RequestParam String mobileNumber);




inside LoansController

@GetMapping("/fetch")
public ResponseEntity<LoansDto> fetchLoanDetails(@RequestHeader("zettabank-correlation-id") String correlationId,
                                                                @RequestParam
                                                               @Pattern(regexp="(^$|[0-9]{10})",message = "Mobile number must be 10 digits")
                                                               String mobileNumber) {
        logger.debug("zettaBank-correlation-id found: {} ", correlationId);
        LoansDto loansDto = iLoansService.fetchLoan(mobileNumber);
        return ResponseEntity.status(HttpStatus.OK).body(loansDto);
    }


inside CardsCotroller also same changes


application.yml of all microservices
logging:
 level:
  com:
   zettamine:
    accounts: debug    --- base package


FetchCustomerDetails 