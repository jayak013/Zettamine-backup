Wrapper Classes
===============
OOPS is all about objects. 

Java is Object Oriented Programming Language

Every data in Java to be treated as objects

The eight primitive data types(byte, short, int, long, float, double, char and boolean) of java are not treated as objects.

Wrapper classes are the pre-defined classes of java used to represent the primitive data of java as objects

Since java is object oriented language, sometimes it is required to send object instead of a primitive data type, in this case wrapper class object is used.

For example, in Collections (java.util.ArrayList) can store only objects, here primitive data cannot be used. If "int" or "char" data is to be stored in Collections then its corresponding objects are required; hence wrapper classes are created

Wrapper class objects allow "null" value while primitive data type does not allow "null" value.

 int age= null; //Invalid
 Integer age = null; //Valid


Primitive Type | Wrapper class
--------------   -------------
boolean 	java.lang.Boolean
char 		java.lang.Character
byte 		java.lang.Byte
short 		java.lang.Short
int 		java.lang.Integer
long 		java.lang.Long
float 		java.lang.Float
double 		java.lang.Double


Constructors Of Wrapper Classes
-------------------------------
1) takes primitive data as an argument
2) takes string as an argument (not for Character).

Integer i1 = new Integer(12);
Integer i2 = new Integer("12");

Character c1 = new Character('A');

Boolean status1 = new Boolean(true);
Boolean status2 = new Boolean("true");


3) valueOf(String s) : every wrapper class except Character class contains a static valueOf() method to create Wrapper class object for given String.
  Integer i1 = Integer.valueOf("10");

4) valueOf(primitive data) 
 Integer i2 = Integer.valueOf(10);
 Character c = Character.valueOf('A');



Example-1: Converting a primitive type to Wrapper object

//Converting int primitive into Integer object  
int num=100;  
Integer obj=Integer.valueOf(num);  
System.out.println(num+ " | "+ obj);  

In the program, both primitive data type and object have same values. We can use "obj" in place of "num" wherever we need to pass the value of num as an object.

Example-2: Converting Wrapper class object to Primitive

//Creating Wrapper class object 
Integer obj = new Integer(100);  
	
//Converting the wrapper object to primitive
int num = obj.intValue();
System.out.println(num+ " | "+ obj);  


Parsing Methods
---------------
All wrapper classes in java except Character class have methods to parse the given data in string form to corresponding primitive data 

If the string is not parseable, we get java.lang.NumberFormatException 

parsing methods are static methods

byte b = Byte.parseByte("10");
System.out.println(b); //10
 
short s = Short.parseShort("25");
System.out.println(s); //25
 
int i = Integer.parseInt("123");
System.out.println(i); //123
 
long l = Long.parseLong("100");
System.out.println(l); //100
 
float f = Float.parseFloat("12.35");
System.out.println(f); //12.35
 
double d= Double.parseDouble("12.8");
System.out.println(d); //12.8
 
boolean b1 = Boolean.parseBoolean("true");
System.out.println(b1); //true
 
boolean b2 = Boolean.parseBoolean("abc");
System.out.println(b2); //false       
 

 
2) xxxValue() method:  to get the primitive data for the given Wrapper Object. Every Number type Wrapper class( Byte, Short, Integer, Long, Float, Double) contains the following 6 methods to get primitive for the given Wrapper object:

    byte byteValue()
    short shortValue()
    int intValue()
    long longValue()
    float floatValue()
    double doubleValue()


3) toString() method: to convert Wrapper object or primitive to String. 
	Integer i = new Integer(10);
        String s = i.toString();
        System.out.println(s);

toString(primitive value) : to convert primitive data to String.

String s = Integer.toString(10);
System.out.println(s); //10
String s1 = Character.toString('a');
System.out.println(s1); //a


toString(primitive value, int radix) : Integer and Long classes contains this method to convert primitve to specified radix String (number system format). 

String str = Integer.toString(255);
System.out.println(str);

str = Integer.toString(255,2);
System.out.println(str); //11111111

str = Integer.toString(255,8);
System.out.println(str); //377

str = Integer.toString(255,16);
System.out.println(str); //ff


toHexString(), toOctalString() and toBinaryString() Methods


System.out.println(Integer.toBinaryString(255)); //11111111
System.out.println(Integer.toOctalString(255)); //377
System.out.println(Integer.toHexString(255)); //ff
-------------------------------------


Autoboxing and Unboxing
=======================
Autoboxing is the process of the automatic conversion of primitive data to their corresponding wrapper object.

For example conversion of int to java.lang.Integer, long to java.lang.Long, double to java.lang.Double etc.

 int n1 = 25;
 Integer n2 = n1;
 System.out.println(n1+" | "+n2);

Unboxing is the process of converting a wrapper object to its corresponding primitive type. 

For example  conversion of java.lang.Integer to int, Long to long, Double to double etc.

 Integer n1 = new Integer(25); //Integer.valueOf(25);
 int n2 = n1;
 System.out.println(n1+" | "+n2);



Note: 
Whenever we use a wrapper object in an expression, automatic unboxing and boxing is done by JVM.

Integer obj = new Integer(100);
++obj;
System.out.println(obj); //101

When we perform increment operation on Integer object, it is first unboxed, then incremented and then again reboxed into Integer type object.


Usecase:
public class Case1 
{
public static void main(String args[]) 
{
 Integer n1 = 128;
 Integer n2 = 128;
 System.out.println(n1 == n2); //false - Since n1 and n2 refer to different objects
}
}
O/P: false



public class Case2 
{
public static void main(String args[]) 
{
 Integer n1 = 127;
 Integer n2 = 127;
 System.out.println(n1 == n2); //true
}
}

In Java, values from -128 to 127 are cached, so the same object is returned. The implementation of valueOf() uses cached objects if the value is between 
-128 to 127 otherwise valueOf() method is not used.

If we explicitly create Integer objects using new operator
  Integer i1 = new Integer(127);
  Integer i2 = new Integer(127);
  System.out.println(i1 == i2); //false

----------------------------------


Type Conversion - Widening & Narrowing
======================================
Widening is the process of automatic conversion from small sized primitive data to big sized primitive type.
 
Example : the data is automatically converted from 
byte > short > int > long > float> double
         char>

byte b = 25;
int n = b;

We have to explicitly cast the data from big sized primitive type to small sized primitive type. i.e we have to explicitly convert the data from double to float, float to long, long to int, int to short and short to byte. This is called  narrowing. 

double n = 25.6;
byte b = (byte)n;
System.out.println(n+" | "+ b); // 25.6 | 25






Method Overloading with Autoboxing and Widening in Java
-----------------------------------

There are some rules for method overloading with boxing and widening: 

1) widening beats boxing
- more preference for widening than boxing

Case-1:
class MethodTest
{
 static void method(Integer I)
 {
  System.out.println("Integer Wrapper Type");
 }
 
 static void method(long l) 
 {
  System.out.println("long primitive type");
 }
 
 public static void main(String[] args)
 {
   int n = 12;
   method(n); 
 } 
}

O/P: "long primitive type"  
means- auto-widening is happening not boxing.

change the argument from "long" to "short" in second method()and we can see that the o/p will be "Integer Wrapper Type"


Case-2:
Change the argument of second method from primitive "long" type to "Long" wrapper class type.

class MethodTest
{
 static void method(Integer I)
 {
  System.out.println("Integer   Wrapper Type");
 }
 
 static void method(Long l) 
 {
  System.out.println("Long Wrapper  Type");
 }
 
public static void main(String[] args)
 {
   int n = 12;
   method(n);
 } 
}

O/P: "Integer Wrapper Type" 
- means since no similar type and no widening option, so boxing is happening.

Case-3
Change the argument of first method from Integer Wrapper class Type to Double Wrapper class Type.

class MethodTest
{
 static void method(Double I)
 {
  System.out.println("Double Wrapper Type");
 }
 
 static void method(Long l) 
 {
  System.out.println("Long Wrapper  Type");
 }
 
public static void main(String[] args) {
   int n = 12;
   method(n);
 } 
}

Compilation Error -because, there is no method definition which takes "int " type or no chance of widening or boxing. 





Primitive int type can be auto-widened to big sized primitive types (long, float or double) or can be auto-boxed to "java.lang.Integer" wrapper class type but can not be converted into Double or Long wrapper class type.

check for first method with "java.lang.Number" type argument - correct

Case-4

Now, add one more overloadedMethod which takes Number Class type as an argument to the above class

class Test
{
  static void method(Number I)
  {
    System.out.println("Number Type");
  }

  static void method(Double I)
  {
    System.out.println("Double Wrapper Type");
  }
 
  static void method(Long l)
  {
    System.out.println("long primitive type");
  }
 
 public static void main(String[] args)
 {
    int i = 21;
    method(i);
 } 
}

Now run this program, you will get "Number Class Type" as output. What happened here is, internally primitive int type is auto-boxed to "Integer" type and "Integer" type is Upcasted to Number type automatically; as Integer wrapper class is a sub class of java.lang.Number class.





2) widening beats varargs

  static void m(int i1, int i2){ 
     System.out.println("int int");
  }  
  static void m(Short... i){
     System.out.println("Integer...");
  }  
  
  public static void main(String[] args)
  {  
   short s1=30,s2=40;  
   m(s1,s2);  
  }   

O/P: int int

3) boxing beats varargs

  static void m(Integer i){
    System.out.println("Integer");
  }  
  static void m(Integer... i){
     System.out.println("Integer...");
  }  
  
  public static void main(String args[]){  
   int a=30;  
   m(a);  
  }   

O/P: Integer


4) Widening and Boxing can't be performed

  static void m(Long l){
    System.out.println("Long");
  }  
  
  public static void main(String[] args){  
   int a=30;  
   m(a);  
 }   



