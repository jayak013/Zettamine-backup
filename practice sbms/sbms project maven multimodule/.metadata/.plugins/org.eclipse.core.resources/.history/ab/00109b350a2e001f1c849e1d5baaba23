package com.jayasbms.demo.controller;

import static org.junit.jupiter.api.Assertions.fail;
import static org.springframework.test.web.client.match.MockRestRequestMatchers.content;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.math.BigDecimal;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultMatcher;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.jayasbms.demo.dto.ProductRequest;
import com.jayasbms.demo.dto.ProductResponse;
import com.jayasbms.demo.model.Product;
import com.jayasbms.demo.service.ProductService;

@WebMvcTest(ProductControllerTest.class)
class ProductControllerTest {
	
	@Autowired
	private MockMvc mockMvc;
	
	@Mock
	private ProductService prodService;
	
	@Autowired
	private ObjectMapper objMapper;
	
	private Product product;
	private ProductResponse prodResponse;
	private ProductRequest prodRequest;

	@BeforeAll
	static void setUpBeforeClass() throws Exception {
	}

	@AfterAll
	static void tearDownAfterClass() throws Exception {
	}

	@BeforeEach
	void setUp() throws Exception {
		
		prodRequest = ProductRequest.builder().name("iphone 13")
								.description("iphone 13")
								.price(BigDecimal.valueOf(1200.00))
								.build();
		
		product = Product.builder()
						.id(100)
						.name(prodRequest.getName())
						.description(prodRequest.getDescription())
						.price(prodRequest.getPrice())
						.build();
		
		prodResponse = ProductResponse.builder().id(product.getId())
									.name(product.getName())
									.description(product.getDescription())
									.price(product.getPrice())
									.build();
		
		
	}

	@AfterEach
	void tearDown() throws Exception {
		prodRequest = null;
		product = null;
		prodResponse = null;
	}

	@Test
	void testCreateProduct() throws Exception {
		
		String prodReqJson = objMapper.writeValueAsString(prodRequest);
				
		mockMvc.perform(post("/api/product")
				.contentType(MediaType.APPLICATION_JSON)
				.content(prodReqJson))
				.andExpect(status().isCreated())
				.andExpect(jsonPath("$.id").value(100))
				.andExpect(jsonPath("$.name").value("Test Product"))
                .andExpect(jsonPath("$.description").value("Test Description"))
                .andExpect(jsonPath("$.price").value(12000.00));

			
	}

//	@Test
//	void testGetAllProducts() {
//		fail("Not yet implemented");
//	}

}
