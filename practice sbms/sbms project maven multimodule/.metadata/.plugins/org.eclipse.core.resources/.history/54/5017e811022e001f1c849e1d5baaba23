package com.jayasbms.demo.service.impl;

import static org.mockito.Mockito.*;

import java.math.BigDecimal;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;

import com.jayasbms.demo.dto.ProductRequest;
import com.jayasbms.demo.model.Product;
import com.jayasbms.demo.repository.ProductRepository;

@ExtendWith(MockitoExtension.class)
class ProductServiceImplTest {

    @Mock
    private ProductRepository prodRepo;

    @Mock
    private Logger log;

    @InjectMocks
    private ProductServiceImpl prodService;

    private Product product;
    private Product savedProduct;
    private ProductRequest productRequest;

    @BeforeAll
    static void setUpBeforeClass() throws Exception {
        // Initialization that applies to all tests in the class
    }

    @AfterAll
    static void tearDownAfterClass() throws Exception {
        // Cleanup that applies to all tests in the class
    }

    @BeforeEach
    void setUp() throws Exception {
        productRequest = new ProductRequest();
        productRequest.setName("Test Product");
        productRequest.setDescription("Test Description");
        productRequest.setPrice(new BigDecimal(12000.00));

        savedProduct = Product.builder()
                .id(100)
                .name(productRequest.getName())
                .description(productRequest.getDescription())
                .price(productRequest.getPrice())
                .build();

        product = Product.builder()
                .name(productRequest.getName())
                .description(productRequest.getDescription())
                .price(productRequest.getPrice())
                .build();
    }

    @AfterEach
    void tearDown() throws Exception {
        product = null;
        savedProduct = null;
        productRequest = null;
    }

    @Test
    void testCreateProduct() {
        // Arrange
        when(prodRepo.save(any(Product.class))).thenReturn(savedProduct);
        doNothing().when(prodService).createProduct(any(ProductRequest.class));

        // Act
        prodService.createProduct(productRequest);

        // Assert
        verify(prodRepo).save(any(Product.class));
    }

    // @Test
    // void testGetAllProducts() {
    //     fail("Not yet implemented");
    // }

}
